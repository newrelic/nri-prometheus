############################################
# Prometheus exporter for K8s that serves
# metrics from a plain text file
############################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: from-file-prometheus-exporter
  labels:
    app: from-file-prometheus-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: from-file-prometheus-exporter
  template:
    metadata:
      labels:
        app: from-file-prometheus-exporter
        prometheus.io/scrape: "true"
    spec:
      containers:
        - name: from-file-prometheus-exporter
          image: golang:alpine
          env: # Files will be downloaded from the following URLs if they are not empty
            - name: METRICS_FILE_URL
              value: "https://raw.githubusercontent.com/newrelic/nri-prometheus/santalla/mockexporter/internal/integration/test/cadvisor.txt"
            - name: TESTER_SCRIPT_URL
              value: "https://raw.githubusercontent.com/newrelic/nri-prometheus/santalla/mockexporter/internal/cmd/mockexporter/mockexporter.go"
          ports:
            - name: metrics
              containerPort: 8080
          command: ["/bin/sh","-c"]
          # The reason of using a URL instead of a config map is that the latest has a limitation of up to 1MB
          args:
            - |
              [[ -n "$METRICS_FILE_URL" ]] && wget $METRICS_FILE_URL -O /app/metrics
              [[ -n "$TESTER_SCRIPT_URL" ]] && wget $TESTER_SCRIPT_URL -O /app/loadtest.go
              go run /app/loadtest.go -addr :8080 -metrics /app/metrics -latency 50 -latency-variation 15
          volumeMounts:
            - mountPath: /app
              name: metrics-dir
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: metrics-dir
          emptyDir: {} # Alternatively to file download, ./internal/mockexporter from this repo can be mounted here
---
apiVersion: v1
kind: Service
metadata:
  name: from-file-prometheus-exporter
spec:
  type: ClusterIP
  selector:
    app: from-file-prometheus-exporter
  ports:
    - name: prometheus-metrics
      port: 8080
      targetPort: metrics
