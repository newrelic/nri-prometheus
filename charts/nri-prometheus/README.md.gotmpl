{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

# Helm installation

You can install this chart using [`nri-bundle`](https://github.com/newrelic/helm-charts/tree/master/charts/nri-bundle) located in the
[helm-charts repository](https://github.com/newrelic/helm-charts) or directly from this repository by adding this Helm repository:

```shell
helm repo add nri-prometheus https://newrelic.github.io/nri-prometheus
helm upgrade --install nri-prometheus/nri-prometheus -f your-custom-values.yaml
```

## Scraping services and endpoints

When a service is labeled or annotated with `scrape_enabled_label` (defaults to `prometheus.io/scrape`),
`nri-prometheus` will attempt to hit the service directly, rather than the endpoints behind it.

This is the default behavior for compatibility reasons, but is known to cause issues if more than one endpoint
is behind the service, as metric queries will be load-balanced as well leading to inaccurate histograms.

In order to change this behaviour set `scrape_endpoints` to `true` and `scrape_services` to `false`.
This will instruct `nri-prometheus` to scrape the underlying endpoints, as Prometheus server does.

Existing users that are switching to this behavior should note that, depending on the number of endpoints
behind the services in the cluster the load and the metrics reported by those, data ingestion might see
an increase when flipping this option. Resource requirements might also be impacted, again depending on the number of new targets.

While it is technically possible to set both `scrape_services` and `scrape_endpoints` to true, we do no recommend
doing so as it will lead to redundant metrics being processed,

## Values managed globally

This chart implements the [New Relic's common Helm library](https://github.com/newrelic/helm-charts/tree/master/library/common-library) which
means that is has a seamless UX between things that are configurable across different Helm charts. So there are behaviours that could be
changed globally if you install this chart from `nri-bundle` or your own umbrella chart.

A really broad list of global managed values are `affinity`, `nodeSelector`, `tolerations`, `proxy` and many more.

For more information go to the [user's guide of the common library](https://github.com/newrelic/helm-charts/blob/master/library/common-library/README.md)

## Chart particularities

### Low data mode
See this snippet from the `values.yaml` file:
```yaml
global:
  lowDataMode: false
lowDataMode: false
```

To reduce the amount ot metrics we send to New Relic, enabling the `lowDataMode` will add [these transformations](static/lowdatamodedefaults.yaml):
```yaml
transformations:
  - description: "Low data mode defaults"
    ignore_metrics:
      # Ignore the following metrics.
      # These metrics are already collected by the New Relic Kubernetes Integration.
      - prefixes:
        - kube_
        - container_
        - machine_
        - cadvisor_
```

{{ template "chart.valuesSection" . }}

{{ if .Maintainers }}
## Maintainers
{{ range .Maintainers }}
{{- if .Name }}
{{- if .Url }}
* [{{ .Name }}]({{ .Url }})
{{- else }}
* {{ .Name }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
