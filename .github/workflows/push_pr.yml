name: Push/PR pipeline

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:

env:
  TAG: "v0.0.0" # needed for goreleaser windows builds
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  ORIGINAL_REPO_NAME: "newrelic/nri-prometheus"
  GO_VERSION: '1.16'
  DOCKER_LOGIN_AVAILABLE: ${{ secrets.OHAI_DOCKER_HUB_ID }}

jobs:
  validate:
    name: Validate code via linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        if: ${{ env.DOCKER_LOGIN_AVAILABLE }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Validate code
        run: make ci/validate

  test-nix:
    name: Run unit tests on *Nix
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        if: ${{ env.DOCKER_LOGIN_AVAILABLE }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Unit tests
        run: make ci/test

  test-windows:
    name: Run unit tests on Windows
    runs-on: windows-2019
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{ env.ORIGINAL_REPO_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{ env.ORIGINAL_REPO_NAME }}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Running unit tests
        shell: pwsh
        run: |
          .\build\windows\unit_tests.ps1

  # can't run this step inside of container because of tests specific
  test-integration-nix:
    name: Run integration tests on *Nix
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: src/github.com/${{ env.ORIGINAL_REPO_NAME }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: src/github.com/${{ env.ORIGINAL_REPO_NAME }}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Integration test
        env:
          GOPATH: "${{ github.workspace }}"
        run: make integration-test

  # make sure code build in all platforms
  build:
    name: Build binary for all platforms:arch
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        if: ${{ env.DOCKER_LOGIN_AVAILABLE }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Build all platforms:arch
        run: make ci/build

  snyk:
    name: Run security checks via snyk
    runs-on: ubuntu-20.04
    env:
      SNYK_TOKEN: ${{ secrets.COREINT_SNYK_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        if: ${{ env.DOCKER_LOGIN_AVAILABLE }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Scan code for vulnerabilities
        if: ${{ env.SNYK_TOKEN }}
        run: make ci/snyk-test

  coverage:
    name: Report coverage analysis to codeclimate
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        if: ${{ env.DOCKER_LOGIN_AVAILABLE }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - run: make compile-deps
      # go test outputs a fully qualified package path on the report, which confuses codeclimate if repo is not in $GOPATH
      - name: Set codeclimate prefix
        run: |
          echo "CC_PREFIX=$(go list -m)" >> $GITHUB_ENV
      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: 286fd24e272c97116860791b9c4ed636092663dc665a6608c8aaa625e9c46b1b
        with:
          coverageCommand: go test -coverprofile=c.out ./...
          prefix: ${{ env.CC_PREFIX }} # CC will strip this from the test report, leading to the correct file path
