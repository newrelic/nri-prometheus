name: Release pipeline

on:
  release:
    types:
      - prereleased
      - released
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.16'
  INTEGRATION: "prometheus"
  ORIGINAL_REPO_NAME: 'newrelic/nri-prometheus'
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic Infrastructure'
  PFX_PASSPHRASE: ${{ secrets.OHAI_PFX_PASSPHRASE }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  TAG: ${{ github.event.release.tag_name }}
  S3_PATH: s3://nr-downloads-main/infrastructure_agent
  TAG_SUFFIX: "" # This suffix is used for pre-release only

jobs:
  # this might not be necessary
  snyk:
    name: Run security checks via snyk
    runs-on: ubuntu-20.04
    env:
      SNYK_TOKEN: ${{ secrets.COREINT_SNYK_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Scan code for vulnerabilities
        run: make ci/snyk-test

  test-nix:
    name: Run unit tests on *Nix
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
      - name: Unit tests
        run: make ci/test

  test-windows:
    name: Run unit tests on Windows
    runs-on: windows-2019
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Running unit tests
        shell: pwsh
        run: |
          .\build\windows\unit_tests.ps1

  # can't run this step inside of container because of tests specific
  test-integration-nix:
    name: Run integration tests on *Nix
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Integration test
        env:
          GOPATH: ${{ github.workspace }}
        run: make integration-test

  # cant run on container because we want to push docker images through goreleaser
  release:
    name: Use goreleaser for releasing
    runs-on: ubuntu-20.04
    needs: [ test-nix, test-windows, test-integration-nix ]
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.FSI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.FSI_DOCKERHUB_TOKEN }}
      - uses: aws-actions/configure-aws-credentials@v1
        if: ${{ !github.event.release.prerelease }}   # Note the *not* operator
        with:
          aws-access-key-id: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: us-east-1
          role-duration-seconds: 1200
          role-to-assume: ${{ secrets.OHAI_AWS_ROLE_ARN_PRODUCTION }}
          role-session-name: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_PRODUCTION }}
          role-skip-session-tagging: true
      - uses: aws-actions/configure-aws-credentials@v1
        if: ${{ github.event.release.prerelease }}
        with:
          aws-access-key-id: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          role-duration-seconds: 1200
          role-to-assume: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          role-session-name: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
          role-skip-session-tagging: true
      - name: Test for prerelase
        if: ${{ github.event.release.prerelease }}
        run: |
          echo "TAG_SUFFIX=-pre" >> $GITHUB_ENV
          echo "S3_PATH=s3://nr-downloads-ohai-staging/infrastructure_agent" >> $GITHUB_ENV
      - name: do the release
        run: make release
        env:
          GENERATE_PACKAGES: true
          UPLOAD_PACKAGES: ${{ github.event.release.prerelease }}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.COREINT_SLACK_TOKEN }}
          slack-channel: ${{ secrets.COREINT_SLACK_CHANNEL }}
          slack-text: "❌ `${{ env.REPO_FULL_NAME }}`: prerelease pipeline failed."

  package-win:
    if: ${{ github.event.release.prerelease }}
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [ release ]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    strategy:
      matrix:
        goarch: [ amd64, 386 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
      - name: Download zip from GH Release assets and extract .exe
        shell: pwsh
        run: |
          build\windows\download_zip_extract_exe.ps1 "$env:INTEGRATION" ${{ matrix.goarch }} "$env:TAG" "$env:REPO_FULL_NAME"
      - name: Create MSI
        shell: pwsh
        run: |
          build\windows\package_msi.ps1 -integration "$env:INTEGRATION" -arch ${{ matrix.goarch }} -tag "$env:TAG" -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      - name: Upload MSI to GH
        shell: bash
        run: |
          build/windows/upload_msi.sh ${INTEGRATION} ${{ matrix.goarch }} ${TAG} ${REPO_FULL_NAME}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.COREINT_SLACK_TOKEN }}
          slack-channel: ${{ secrets.COREINT_SLACK_CHANNEL }}
          slack-text: "❌ `${{ env.REPO_FULL_NAME }}`: prerelease pipeline failed."
