name: Release pipeline

on:
  release:
    types:
       # a pre-release is created
      - prereleased
      # a release or draft of a release is published, or a pre-release is changed to a release
      - released
    tags:
      - 'v*'

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.15.2'
  GPG_MAIL: 'infrastructure-eng@newrelic.com' #'info@newrelic.com' # infrastructure-eng@newrelic.com
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  INTEGRATION: "prometheus"
  ORIGINAL_REPO_NAME: 'newrelic/nri-prometheus'
  PFX_CERTIFICATE_BASE64: ${{ secrets.PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic Infrastructure'
  PFX_PASSPHRASE:  ${{ secrets.PFX_PASSPHRASE }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}
  GH_VERSION: '1.2.0'

jobs:

  validate:
    name: Validate code via linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Validate code
        run: make ci/validate

  # this might not be necessary
  snyk:
    name: Run security checks via snyk
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Scan code for vulnerabilities
        run: make ci/snyk-test

  test-nix:
    name: Run unit tests on *Nix
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Unit tests
        run: make ci/test

  test-windows:
    name: Run unit tests on Windows
    runs-on: windows-2019
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Running unit tests
        shell: pwsh
        run: |
          .\build\windows\unit_tests.ps1

  # can't run this step inside of container because of tests specific
  test-integration-nix:
    name: Run integration tests on *Nix
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Integration test
        env:
          GOPATH: ${{ github.workspace }}
        run: make integration-test

  # cant run on container becuase we want to push docker images through goreleaser
  release:
    name: Use goreleaser for releasing
    runs-on: ubuntu-20.04
    needs: [validate, test-nix, test-windows, test-integration-nix]
    steps:    
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: setup github-cli
        run: |
          wget -q https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${{env.GH_VERSION}}_linux_amd64.deb -O /tmp/gh_${{env.GH_VERSION}}_linux_amd64.deb
          sudo apt-get -y install /tmp/gh_${{env.GH_VERSION}}_linux_amd64.deb
      - name: do the release
        run: make release
        env:
          PRERELEASE: ${{ github.event.release.prerelease }}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_WEBHOOK }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: "Repo: ${{env.REPO_FULL_NAME}}, nix release FAILURE!"

  package-win:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [release]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    strategy:
      matrix:
        goarch: [amd64,386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
      - name: Download zip from GH Release assets and extract .exe
        shell: pwsh
        run: |
          build\windows\download_zip_extract_exe.ps1 "$env:INTEGRATION" ${{ matrix.goarch }} "$env:TAG" "$env:REPO_FULL_NAME"
      - name: Create MSI
        shell: pwsh
        run: |
          build\windows\package_msi.ps1 -integration "$env:INTEGRATION" -arch ${{ matrix.goarch }} -tag "$env:TAG" -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      - name: Upload MSI to GH
        shell: bash
        run: |
          build/windows/upload_msi.sh ${INTEGRATION} ${{ matrix.goarch }} ${TAG} ${REPO_FULL_NAME}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_WEBHOOK }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: "Repo: ${{env.REPO_FULL_NAME}}, Windows release FAILURE!"
